#Eclipse modern messages class
CompositeDescriptionMerkleTree=Merkle Signature Scheme (MSS)
CompositeDescriptionXMSS=eXtended Merkle Signature Scheme (XMSS) 
CompositeDescriptionXMSS_MT=XMSS Multi Tree (XMSS^MT)

MerkleTreeView_0=Seed and Key Generation
MerkleTreeView_1=MerkleTree
MerkleTreeView_2=Message Signing
MerkleTreeView_3=Verification

MerkleTree_Generation_Info=Please choose a Seed on the first page and generate the key pairs on the first tab. Those are needed to create a MerkleTree.
ZestLabelProvider_0=Leaf
ZestLabelProvider_1=Node
ZestLabelProvider_2=Hash of the public key
ZestLabelProvider_3=Root
ZestLabelProvider_4=Content
ZestLabelProvider_5=Content of Leaf
ZestLabelProvider_6=Content of the Node 
ZestLabelProvider_7=1
ZestLabelProvider_8=0

MerkleTreeKey_1=Please generate the keys first.
MerkleTreeKey_2=Keylength:
MerkleTreeKey_3=Byte
MerkleTreeKey_column_0=Key Number
MerkleTreeKey_column_1=Private Key
MerkleTreeKey_column_2=Public Key
MerkleTreeKey_Message=The key pairs where generated successfully!

MerkleTreeSign_0=Please define a message!
MerkleTreeSign_1=This is an example Text\r\nYou can add a message of your choosing that should be signed!
MerkleTreeSign_2=Sign Message
MerkleTreeSign_4=Error during signing, please generate a new tree, all key pairs where already used.
MerkleTreeSign_5=Please enter a message you want to sign.
MerkleTreeSign_6=SignatureLength
MerkleTreeSign_7=current KeyIndex


MerkleTreeVerify_0=This is the signature created in the \u201ESignature\u201C tab. The signature can be verified, when the correct index is chosen. This one is chosen initionally. You can also chose an other (wrong) index. If you do so, the verification will fail. The verification starts by calculating the WOTS public key of the WOTS signature. This WOTS key is used to calculate the corresponding leaf of the L-Tree.\r\n\r\nThe following Information is needed for the verification.\r\n\u2022 The public Merkle key\r\n\u2022 The Merkle signature\r\n\u2022 The message\r\n\r\nTo verify a message the OTS public key is calculated from the message and the signature. Together with the index and the authentication path a alternative root node is calculated. If the calculated value matches with the merkle public key, the verification is successful and the signature is accepted, otherwise the verification will fail. 
MerkleTreeVerify_1=Verify
MerkleTreeVerify_2=The verification of the signature with the chosen Node was successful.
MerkleTreeVerify_3=The signature couldn`t be verified successfully!
MerkleTreeVerify_4=Please click Verify to check the chosen Node.
MerkleTreeVerify_5=Path from Root to the chosen Node: 
MerkleTreeVerify_6=Please chose a Leaf to verify the signature. A Node can`t be used to verify the signature!

MerkleTree_Signature_Generation_Info=Please create a signature in the third tab first. After you created a signature, it can be verified in this tab. 

UnsavedChanges=Unsaved changes! Do you want to save the changes?


Tab0_Head1=Seed
Tab0_Head2=Generate Key Pairs
Tab0_Head4=Bitmask seed
Tab0_Head3=Bitmask
Tab0_Txt3=The Bitmask is one of the main differences to the Merkle Signature Scheme. The Bitmask is a pseudorandom choosen binary value. Here you can enter the seed for the pseudorandom generator that generates the Bitmask.

Tab0_Button1=Generate new Seed
Tab0_Button2=Generate Keys
Tab0_Button3=Generate new Bitmask seed

Tab0_Lable1=Number of Keys

