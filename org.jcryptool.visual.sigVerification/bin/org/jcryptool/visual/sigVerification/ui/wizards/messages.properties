#Eclipse messages class
#HashWizard
#Group box 1 text
HashWizard_grpHashes=Hashfunktion
HashWizard_header=W\u00e4hlen Sie eine Hashfunktion aus. 
#Group box 2 text
HashWizard_grpDescription=Beschreibung
#The Texts for the descriptions of the methods
HashWizard_WindowTitle=W\u00e4hlen Sie die Hashfunktion
HashWizard_rdomd5_description=Der MD5-Algorithmus (ver\u00f6ffentlicht im Jahr 1992 und spezifiziert in RFC 1321) generiert aus einer gegebenen Nachricht einen 128-Bit langen "Fingerabdruck" oder "Hashwert". Der MD5-Algorithmus ist f\u00fcr digitale Signaturapplikationen vorgesehen, in der sehr gro\u00dfe Dateien sicher "komprimiert" werden m\u00fcssen, bevor sie, wie beispielsweise in einem \u00f6ffentlicher-Schl\u00fcssel-Kryptosystem wie RSA, mit einem privaten Schl\u00fcssel signiert werden.
HashWizard_rdosha1_description=Der \u201CSecure Hash Algoritm\u201D (ver\u00f6ffentlicht im Jahr 1995 von der United States NIST) berechnet eine verk\u00fcrzte Darstellung einer Nachricht oder einer Datei. SHA-1 generiert dabei aus einer Datei beliebige L\u00e4nge (< 264 Bits), eine 160-Bit-Ausgabe. SHA-1 gilt als sicher, weil es praktisch unm\u00f6glich ist, eine Nachricht zu finden, die zu einem gegebenen Hashwert passt oder zwei verschiedene Nachrichten zu finden, die denselben Hashwert generieren. Jede \u00c4nderung der Nachricht hat, mit hoher Wahrscheinlichkeit, zu folge, dass der Hashwert sich ebenfalls \u00e4ndert und die Verifikation der Signatur w\u00e4re nicht mehr m\u00f6glich.
HashWizard_rdosha256_description=SHA-256 ist eine Nachfolger der SHA-1-Hashfunktion (allgemein auch als SHA-2 bezeichnet) und einer der st\u00e4rksten zurzeit verf\u00fcgbaren Hashfunktionen. W\u00e4hrend SHA-1 praktisch noch nicht gebrochen wurde (in der Theorie allerdings schon), ist der SHA-256-Algorithmus im Vergleich wesentlich komplexer. Es wird allgemein empfohlen diesen Algorithmus zu w\u00e4hlen, als SHA-1.
HashWizard_rdosha384_description=SHA-384 ist gleich wie SHA-512, sie unterscheiden sich allerdings in der L\u00e4nge des generierten Hashwertes (SHA-384 ist verk\u00fcrzt). Der initiale Hash berechnet sich aus den 64 dezimalen Bits der Quadratwurzel der aufeinanderfolgenden Primzahlen (23, 29, etc.). Zum Schluss werden nur die ersten sechs 64-Bit-W\u00f6rter aus dem Ergebnis verwendet. Die angef\u00fcgte Nummer gibt die L\u00e4nge der einzelnen Hashwerte (in Bits) an.
HashWizard_rdosha512_description=SHA-256 und SHA-512 unterscheiden sich in der Wortl\u00e4nge. SHA-256 verwendet 32-Bit-W\u00f6rter, wobei SHA-512 64-Bit-W\u00f6rter verwendet. Die angef\u00fcgte Nummer gibt die L\u00e4nge der einzelnen Hashwerte (in Bits) an.
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1. Don't change those!!!!!!
HashWizard_rdomd5=MD5
#MD5 only with RSA
HashWizard_rdosha1=SHA-1
HashWizard_rdosha256=SHA-256
HashWizard_rdosha384=SHA-384
HashWizard_rdosha512=SHA-512
#SignatureWizard
#Group box 1 text
SignatureWizard_header=W\u00e4hlen Sie die Verifikationsmethode aus, mit der Sie Ihr Dokument verifizieren m\u00f6chten.
SignatureWizard_grpSignatures=Verifikationsmethoden
#Group box 2 text
SignatureWizard_WindowTitle=W\u00e4hlen Sie die Verifikationsmethode aus.
SignatureWizard_grpDescription=Beschreibung
SignatureWizard_Usage=
SignatureWizard_DSA_description=Der \u201CDigital Signature Algorithm\u201C (DSA) (ver\u00f6ffentlicht im Jahr 1991 von NIST) ist ein \u201EUnited States Federal Government\u201C-Standard f\u00fcr digitale Signaturen. Mit DSA ist die Entropie, Geheimhaltung, und die Einzigartigkeit des zuf\u00e4lligen Signatur-Wertes entscheidend. Jede Verletzung einer dieser drei Anforderungen kann dazu f\u00fchren, dass der gesamte private Schl\u00fcssel dem Angreifer  offenbart wird. Wird der zuf\u00e4llige Signatur-Wert ein zweites Mal verwendet, ein vorhersehbarer Wert berechnet oder sind nur einige Bits des Wertes in jeder der Signaturwerte undicht, kann DAS gebrochen werden.
SignatureWizard_RSA_description=RSA (ver\u00f6ffentlicht im Jahr 1977) ist ein Algorithmus f\u00fcr asymmetrische kryptografische Verfahren, die auf der mutma\u00dflichen Schwierigkeit der Faktorisierung von gro\u00dfen Zahlen, dem Faktorisierungsproblem, basiert. Jeder kann den \u00f6ffentlichen Schl\u00fcssel zum Verifizieren einer Nachricht, aber nur der Besitzer des privaten Schl\u00fcssels kann die Nachricht signieren. Ein Angreifer, der den privaten Schl\u00fcssel nicht kennt, m\u00fcsste den Modulus im \u00f6ffentlichen Schl\u00fcssel faktorisieren. Sichere Padding-Verfahren, wie beispielsweise RSA-PSS, sind f\u00fcr die Sicherheit der Signaturerstellung genauso notwendig wie f\u00fcr die der Verschl\u00fcsselung einer Nachricht. Der Cryptography Standard PKCS #1 definiert die Empfehlungen f\u00fcr die Implementierung asymmetrischer Kryptografie, die auf dem RSA-Algorithmus basieren.
SignatureWizard_ECDSA_description=Der \u201CElliptic Curve Digital Signature Algorithm\u201D (ECDSA) (vorgeschlagen von Scott Vanstone im Jahr 1992) ist die elliptische Kurve analog dem \u201CDigital Signature Algorithm\u201C (DSA). Im Gegensatz zum normalen diskreten Logarithmusproblem und dem Faktorisierungsproblem, sind f\u00fcr Elliptischen Kurven keine Probleme bekannt. Die L\u00e4nge des privaten Schl\u00fcssels, der als sicher betrachtet wird, ist mit ECDSA wesentlich k\u00fcrzer. Bei einem Sicherheitsniveau von 80 Bits, was bedeutet, ein Angreifer w\u00fcrde 2^80 Signaturerzeugungsprozesse ben\u00f6tigen, um den privaten Schl\u00fcssel zu finden, ist die Gr\u00f6\u00dfe eines \u00f6ffentlichen DAS-Schl\u00fcssels mindestens 1024 Bit, w\u00e4hrend die Gr\u00f6\u00dfe eines \u00f6ffentlichen ECDA-Schl\u00fcssels 160 Bit w\u00e4re.
SignatureWizard_RSAandMGF1_description=MGFs (mask generation functions) verwenden eine Oktal-Zeichenkette einer variablen L\u00e4nge und generieren eine Zeichenkette (ebenfalls oktal) gew\u00fcnschter L\u00e4nge. MGFs sind deterministisch, das hei\u00dft dass die Input-Zeichenkette die Output-Zeichenkette bestimmt. Das Ergebnis einer MGF soll pseudozuf\u00e4llig (das hei\u00dft unm\u00f6glich vorhersagbar) sein. Deshalb werden oft Hashfunktionen verwendet, um MGFs zu implementieren. MGF1 ist im PKCS #1 v2.1 (Public-Key Cryptography Standards, publiziert von RSA Laboratories) spezifiziert. (Quelle: http://software.intel.com/sites/products/documentation/doclib/ipp_sa/71/ippcp/ippcp_ch3/ch3_mask_generation_functions.htm)
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
SignatureWizard_DSA=DSA
#MD5 only with RSA
SignatureWizard_RSA=RSA
SignatureWizard_ECDSA=ECDSA
SignatureWizard_RSAandMGF1=RSA und MGF1
#SignatureWizard_rdosha512=SHA-512
SignatureWizard_labelCurve=W\u00e4hlen Sie eine Kurve:
SignatureWizard_labelKey=W\u00e4hlen Sie einen Schl\u00fcssel:
#InputWizard
InputWizard_WarningTitle=Achtung
InputWizard_WarningMessageEmpty=Die ausgew\u00e4hlte Datei scheint leer zu sein. Bitte w\u00e4hlen Sie eine andere.
InputWizard_WarningMessageTooLarge=Die ausgew\u00e4hlte Datei ist zu gorß. Bitte w\u00e4hlen Sie eine andere.
#Page 1
#InputWizard_WindowTitle=W\u00e4hlen Sie eine Datei, die Sie verifizieren m\u00f6chten.
#InputWizard_title=W\u00e4hlen Sie eine Datei, die Sie verifizieren m\u00f6chten.
InputWizard_FileOpenDialog=Datei \u00f6ffnen
#Page 2
#InputFileWizard_WindowTitle=W\u00e4hlen Sie eine Datei aus.
InputFileWizard_title=W\u00e4hlen Sie eine Datei aus.
InputFileWizard_header=Bitte w\u00e4hlen Sie eine Datei aus, die Sie verifizieren m\u00f6chten. Sie k\u00f6nnen jeden beliebigen Dateityp verwenden, die maximale Dateigr\u00f6\u00dfe betr\u00e4gt 10 MB.
InputFileWizard_btnBrowse=Durchsuchen

HashWizard_Title=Hashfunktion ausw\u00e4hlen
SignatureWizard_Title=Signaturmethode ausw\u00e4hlen
InputWizard_Title=Datei ausw\u00e4hlen

#InputKeyWizard
InputKeyWizard_title=W\u00e4hlen Sie als Eingabe Ihren \u00f6ffentlichen Schl\u00fcssel.
InputKeyWizard_header=Geben Sie Ihren \u00f6ffentlichen Schl\u00fcssel ein oder w\u00e4hlen Sie eine Datei aus, die Ihren \u00f6ffentlichen Schl\u00fcssel enth\u00e4lt.
InputKeyWizard_rdoFromFile=\u00f6ffentlichen Schl\u00fcssel aus einer Datei laden
InputKeyWizard_rdoFromEditor=\u00f6ffentlichen Schl\u00fcssel im Editor eingeben
InputKeyWizard_rdoFromKeyStore=\u00f6ffentlichen Schl\u00fcssel aus Java Keystore laden
InputKeyWizard_FileOpenDialog=FileOpenDialog

InputKeyWizard_WarningTitle=Achtung
InputKeyWizard_WarningMessageEmpty=Die ausgew\u00e4hlte Datei scheint leer zu sein. Bitte w\u00e4hlen Sie eine andere.
InputKeyWizard_WarningMessageTooLarge=Die ausgew\u00e4hlte Datei ist zu gorß. Bitte w\u00e4hlen Sie eine andere.

#InputKeyFileWizard
InputKeyFileWizard_title=W\u00e4hlen Sie eine Datei aus.
InputKeyFileWizard_header=Bitte w\u00e4hlen Sie eine Datei aus, die Ihren \u00f6ffentlichen Schl\u00fcssel enth\u00e4lt.
InputKeyFileWizard_btnBrowse=Durchsuchen

#Editor
InputKeyEditorWizard_title=\u00f6ffentlichen Schl\u00fcssel eingeben
InputKeyEditorWizard_header=Bitte geben Sie Ihren \u00f6ffentlichen Schl\u00fcssel ein.
InputKeyEditorWizard_Label=Hier k\u00f6nnen Sie Ihren \u00f6ffentlichen Schl\u00fcssel eingeben.
EnterText=Weiter

#Show generated signature
SignaturResult_title=Ergebnis anzeigen
SignaturResult_keyTitle=Verwendeter Schl\u00fcssel/verwendete Kurve: 
SignaturResult_methodTitle=Verifikationsmethode: 

SignaturResult_grpSignature=Signatur
SignaturResult_lengthSig=L\u00e4nge der Signatur: 

SignaturResult_grpOption=Optionen f\u00fcr Signaturen anzeigen
#SignaturResult_dispOpt=Numerische Repr\u00e4sentation: 
SignaturResult_octal=Oktal
SignaturResult_decimal=Dezimal
SignaturResult_hex=Hex
SignaturResult_hexDump=Hex dump (hex und ascii)

SignaturResult_grpMessage=erwarteter Hashwert
SignaturResult_lengthMessage=L\u00e4nge des Hashwertes: 

SignaturResult_editorDescripton=Wenn Sie nach verschiedenen G\u00fcltigkeitsmodellen pr\u00fcfen wollen klicken Sie den Button "G\u00fcltigkeitsmodelle".

SignaturResult_btnOpen=Im Hex editor \u00f6ffnen
SignaturResult_btnClose=Schließen

SignaturResult_btnVerificationModels=G\u00fcltigkeitsmodelle
SignaturResult_tblHex=Hex
SignaturResult_tblAscii=Ascii
SignaturResult_tblAdr=Adresse

Wizard_menu=Alles ausw\u00e4hlen
#Mouseover Texts
#Visual.name.0=Signatur Verifikation
#view.name.0=Signatur Verifikation