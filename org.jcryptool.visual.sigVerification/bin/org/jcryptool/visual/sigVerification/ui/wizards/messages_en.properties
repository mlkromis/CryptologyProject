#Eclipse messages class
#HashWizard
#Group box 1 text
HashWizard_grpHashes=Hash method
HashWizard_header=Select a hash method. 
#Group box 2 text
HashWizard_grpDescription=Description
#The Texts for the descriptions of the methods
HashWizard_WindowTitle=Select the hash method
HashWizard_rdomd5_description=The MD5 algorithm (published in 1992 and specified in RFC 1321) takes as input a message of arbitrary length and produces as output a 128-bit "fingerprint" or "message digest". The MD5 algorithm is intended for digital signature applications, where a large file must be "compressed" in a secure manner before being encrypted with a private key under a public-key cryptosystem such as RSA.
HashWizard_rdosha1_description=The \u201CSecure Hash Algorithm\u201C (published in 1995 by the United States NIST) computes a condensed representation of a message or a data file. When a message of any length < 264 bits is input, the SHA-1 produces a 160-bit output. The SHA-1 is called secure because it was computationally infeasible to find a message which corresponds to a given message digest, or to find two different messages which produce the same message digest. Any change to a message in transit will, with very high probability, result in a different message digest, and the signature will fail to verify. 
HashWizard_rdosha256_description=SHA-256 is one of the successor hash functions to SHA-1 (collectively referred to as SHA-2), and is one of the strongest hash functions available. While SHA-1 has not been compromised in real-world conditions (however in theory), SHA-256 is not much more complex to code. It is recommended to use this method instead of SHA-1.
HashWizard_rdosha384_description=SHA-384 is like SHA-512, but they differ in the size of the hash value (SHA-384 is truncated). The initial hash is calculated from the 64 decimal bits of the square roots of the consecutive primes (23, 29, etc.). In the end only the first six 64-bit words from the result are used. The attached number indicates the length of each hash value (in bits). 
HashWizard_rdosha512_description=SHA-256 and SHA-512 differ in the word size. SHA-256 uses 32-bit words where SHA-512 uses 64-bit words. The attached number indicates the length of each hash value (in bits).
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1. Don't change those!!!!!!
HashWizard_rdomd5=MD5
#MD5 only with RSA
HashWizard_rdosha1=SHA-1
HashWizard_rdosha256=SHA-256
HashWizard_rdosha384=SHA-384
HashWizard_rdosha512=SHA-512
#SignatureWizard
#Group box 1 text
SignatureWizard_header=Select the verification functions you want to use.
SignatureWizard_grpSignatures=Verification functions
#Group box 2 text
SignatureWizard_WindowTitle=Select the verification method
SignatureWizard_grpDescription=Description
SignatureWizard_DSA_description=The Digital Signature Algorithm (DSA) (published by the NIST in 1991) is a United States Federal Government standard for digital signatures. With DSA, the entropy, secrecy, and uniqueness of the random signature value is critical. It is so critical that violating any one of those three requirements can reveal the entire private key to an attacker. Using the same value twice (even while keeping random signature value secret), using a predictable value, or leaking even a few bits of random signature value in each of several signatures, is enough to break DSA.
SignatureWizard_RSA_description=RSA (the algorithm was published in 1977) is an algorithm for public-key cryptography that is based on the presumed difficulty of factoring large integers, the factoring problem. Anyone can use the public key to encrypt a message, but with currently published methods, if the public key is large enough, only someone with knowledge of the prime factors can feasibly decode the message. Secure padding schemes such as RSA-PSS are as essential for the security of message signing as they are for message encryption. The PKCS #1 cryptography standard provides recommendations for the implementation of public-key cryptography based on the RSA algorithm.
SignatureWizard_ECDSA_description=The Elliptic Curve Digital Signature Algorithm (ECDSA) (proposed in 1992 by Scott Vanstone) is the elliptic curve analog of the Digital Signature Algorithm (DSA). Unlike the ordinary discrete logarithm problem and the integer factorization problem, no sub exponential-time algorithm is known for the elliptic curve discrete logarithm problem. The size of a private key that is considered secure is much smaller with ECDSA. At a security level of 80 bits, meaning an attacker requires the equivalent of about 2^80 signature generations to find the private key, the size of a DSA public key is at least 1024 bits, whereas the size of an ECDSA public key would be 160 bits.
SignatureWizard_RSAandMGF1_description=MGF (mask generation functions) functions take an octet string of a variable length and generate an octet string of a desired length. MGFs are deterministic, which means that the input octet string completely determines the output one. The output of an MGF should be pseudorandom, that is, infeasible to predict. That is why one-way hash functions is one of the well-known ways to implement an MGF. MGF 1 is specified in the PKCS #1 v2.1 standard (Public-Key Cryptography Standards, published by RSA Laboratories). (Source: http://software.intel.com/sites/products/documentation/doclib/ipp_sa/71/ippcp/ippcp_ch3/ch3_mask_generation_functions.htm)
#Only with SHA-1 (SHA-1 with all 4). Everything else with RSA, ECDSA, RSA with MGF1
SignatureWizard_DSA=DSA
#MD5 only with RSA
SignatureWizard_RSA=RSA
SignatureWizard_ECDSA=ECDSA
SignatureWizard_RSAandMGF1=RSA and MGF1
#SignatureWizard_rdosha512=SHA-512
SignatureWizard_labelCurve=Select a curve:
SignatureWizard_labelKey=Select a key:
#InputWizard
InputWizard_WarningTitle=Warning
InputWizard_WarningMessageEmpty=The chosen file appears to be empty. Please choose another file.
InputWizard_WarningMessageTooLarge=The chosen file is too large. Please choose another file.
#Page 1
#InputWizard_WindowTitle=W\u00e4hlen Sie eine Datei, die Sie verifizieren m\u00f6chten.
#InputWizard_title=W\u00e4hlen Sie eine Datei, die Sie verifizieren m\u00f6chten.
InputWizard_FileOpenDialog=From file
#Page 2
#InputFileWizard_WindowTitle=W\u00e4hlen Sie eine Datei aus.
InputFileWizard_title=Choose a file.
InputFileWizard_header=Please choose the file you want to verify. You can choose every file type. The maximum data size is 10 MB. 
InputFileWizard_btnBrowse=Browse

HashWizard_Title=Choose hash method
SignatureWizard_Title=Choose signature method
InputWizard_Title=Choose input

#InputKeyWizard
InputKeyWizard_title=Select your private key as input.
InputKeyWizard_header=Enter your public key or select a file which contains the key.
InputKeyWizard_rdoFromFile=Load public key from file
InputKeyWizard_rdoFromEditor=Enter public key in an editor
InputKeyWizard_rdoFromKeyStore=Load public key from Java Keystore
InputKeyWizard_FileOpenDialog=FileOpenDialog

InputKeyWizard_WarningTitle=Warning
InputKeyWizard_WarningMessageEmpty=The chosen file appears to be empty. Please choose another file.
InputKeyWizard_WarningMessageTooLarge=The chosen file appears to be too large. Please choose another file.

#InputKeyFileWizard
InputKeyFileWizard_title=Choose a file.
InputKeyFileWizard_header=Please select the file that contains your public key.
InputKeyFileWizard_btnBrowse=Browse

#Editor
InputKeyEditorWizard_title=Enter public key
InputKeyEditorWizard_header=Please enter your public key.
InputKeyEditorWizard_Label=You can enter the public key here.
EnterText=Next

#Show generated signature
SignaturResult_title=Show result
SignaturResult_keyTitle=Used key/curve: 
SignaturResult_methodTitle=Verification method: 

SignaturResult_grpSignature=Signature
SignaturResult_lengthSig=Length of signature: 

SignaturResult_grpOption=Signature options:
#SignaturResult_dispOpt=Numerische Repr\u00e4sentation: 
SignaturResult_octal=Octal
SignaturResult_decimal=Decimal
SignaturResult_hex=Hex
SignaturResult_hexDump=Hex dump (hex and ascii)

SignaturResult_grpMessage=expected hash
SignaturResult_lengthMessage=Length of hash: 

SignaturResult_editorDescripton=If you want to verify using different validity models please selct the button "Validity models".

SignaturResult_btnOpen=Open in hex editor
SignaturResult_btnClose=Close

SignaturResult_btnVerificationModels=Validity models
SignaturResult_tblHex=Hex
SignaturResult_tblAscii=Ascii
SignaturResult_tblAdr=Address

Wizard_menu=Select all
#Mouseover Texts
#Visual.name.0=Signatur Verifikation
#view.name.0=Signatur Verifikation