VariablesVisualLabelI = i
VariablesVisualLabelJ = j
VariablesVisualLabelStep = Step
WizardPageInvalidHexDigit = is not a valid hexadecimal character.
WizardPageInputLimitPart1 = You have
WizardPageInputLimitPart2 = hexadecimal characters left for input.
InstructionVisualLabel = Number of steps:
InstructionVisualButton = Execute
VectorVisualGroup = Byte vector -- further information is available via the tooltip (speech bubble) or in the online help for this plug-in.
VectorVisualTool = ARC4 uses a byte vector of 256 bytes length to generate its pseudo-random numbers. What you see here is the visual representation of this vector. Each cell represents one byte. You can see changes as soon as they are made. All numbers are in hexadecimal format: The common prefix for hexadecimal values "0x" has been omitted in order to save space and enhance readability.
InstructionVisualGroup = Control of the algorithm
InstructionVisualTool = This part of the view allows you to control the algorithm. Please insert the number of steps you want the algorithm to advance into the input field and press the button labeled with "Execute". Further information e.g. concerning the number of steps is available in the help of the plug-in and a short version of it is also available via the tooltip of the input field.
InstructionVisualInputTool = This field allows you to choose the number of steps the algorithm will advance when clicking on the "Execute" button. The algorithm always needs 256 in order to initialize the byte vector and after that it needs one additional step for each byte that shall be encrypted. In this case, 16 bytes will be encrypted, so the algorithm needs 256 + 16 = 272 steps in total.
InstructionVisualButtonTool = By pressing this button you cause the algorithm to advance as many steps as you have chosen with the input field behind "Number of steps".
VariablesVisualGroup = Variables
VariablesVisualTool = This part of the view allows you to watch the internal variables of the algorithm while execution and displays how far the execution of the algorithm has already progressed. Additional information concerning the formulas which are used to calculate those values is available via the help of the plug-in.
DatavectorVisualKEYGroup = Key in hexadecimal format
DatavectorVisualKEYTool = This part of the view allows you to choose a key to encrypt your text. If you do not choose a key a randomly generated key is used. You cannot choose a key after you started the execution of the algorithm by pressing "Execute". Each cell represents one byte of the key. The common prefix for hexadecimal values "0x" has been omitted in order to save space and enhance readability. Further information is available via the help function of this plug-in.
DatavectorVisualENCGroup = Encrypted text in hexadecimal format
DatavectorVisualENCTool = Here you can see the bytes of the encrypted text in hexadecimal format.
DatavectorVisualPLAINGroup = Plaintext in hexadecimal format
DatavectorVisualPLAINTool = This part of the view allows you to choose a plaintext to encrypt. If you do not choose a plaintext, a randomly generated one will be used. You cannot choose a plaintext after you started the execution of the algorithm by pressing "Execute". Each cell represents one byte of the plaintext. The common prefix for hexadecimal values "0x" has been omitted in order to save space and enhance readability. Further information is available via the help function of this plug-in.
DatavectorVisualRANDGroup = Generated pseudo-random number in hexadecimal format
DatavectorVisualRANDTool = Here you can see the bytes of the generated pseudo-random numbers. ARC4 is a stream cipher. Therefore it first uses a key to generate a sequence of pseudo-random numbers. This numbers will then be XORed with the plaintext.
DatavectorVisualKEYButton = Choose
DatavectorVisualPLAINButton = Choose
DatavectorVisualKEYWizard = Key selection wizard
DatavectorVisualPLAINWizard = Plaintext selection wizard
DatavectorVisualKEYButtonTool = Open a wizard that allows you to choose the key.
DatavectorVisualPLAINButtonTool = Open a wizard that allows you to choose the plaintext.
WizardPageDescriptionKey = Please insert the key you want to use to encrypt. For the sake of simplicity the key has to be \nexactly 32 hex-digits (16 byte) long in this visualization. In general, ARC4 keys are between five and 256 byte long.
WizardPageDescriptionPlain = Please insert the plaintext you want to encrypt. The plaintext has to be exactly 32 hex-digits (16 byte) long.
WizardPageHexNotification = The input is taken only in hexadecimal format, that means you have the digits 0 - 9 and the letters A - F as well as a - f available.
WizardPageToLong = You cannot insert more than 32 hexadecimal digits (16 bytes).
PluginDescription = This plug-in visualizes the internal variables and the byte vector of the ARC4 algorithm and its variant Spritz. You can either run the algorithm step by step or you can complete the operation in a single step. You can enter key and plaintext by yourself, or use the predefined ones, or you can make the program to generate them pseudo-randomly. ARC4 is a stream cipher. Therefore, it uses a key to generate a stream of pseudo-random bytes. These bytes will then be XORed with the plaintext. Decryption is basically the same procedure: The random bytes are generated again and then they are XORed with the ciphertext. In the first 256 steps of the algorithm the byte vector and the other internal variables will be initialized. With each additional step, a random byte will be generated and used to encrypt one byte of the plaintext. In this case the plaintext is 16 bytes long; therefore, 16 steps are required to encrypt it completely. As a result this visualization needs exactly 272 steps in total. Further information is available via the help system of JCrypTool or in the tooltips of the elements of the UI.
InstuctionVisualFinish = Encrypt all
InstructionVisualFinishTool = By clicking this button, the algorithm will complete its operation in one step and you can see the result of its operation.
PluginDescriptionCaption = ARC4
InstructionVisualRYESText = Highlight \nchanges
InstructionVisualRYESTool = Determine, wether changes in the byte vector will be highlighted
InstructionVisualRNOText = Do not high-\nlight changes
InstructionVisualRNOTool = Determine, wether changes in the byte vector will be highlighted
CompositeResetText = Reset count
CompositeResetTool = By clicking this button you can reset the step counter. This allows you to keep your chosen key and plaintext, but restarts the encryption process.
CompositeSettingsText = Misc settings
CompositeSettingsTool = This section of the UI allows you to toggle the coloring of changes in the byte vector. It also allows you to reset the plug-in.
CompositeAlgFinishTitle = Encryption finished!
CompositeAlgFinishText = The execution of the algorithm is finished: So, all 272 steps have been executed and all 16 bytes of the plaintext are now encrypted. Pressing either "Execute" or "Encrypt all" will not do anything apart from displaying this message again. After closing this window by pressing OK, you can either reset the step counter and watch the same encryption all over again, or you can choose a new plaintext and a new key in order to encrypt these.
CompositeSettingsRandText = Randomize
CompositeSettingsRandTool = Fill the key and the plaintext with new random numbers. You cannot execute this action, after you started the algorithm.
VariablesVisualDec = Decimal
VariablesVisualHex = Hexadecimal
WizardPageInputFull = You cannot enter more than 32 hexadecimal digits (16 byte).
VariableW = w
CompositeWTool = Spritz needs one additional parameter called w. In ARC4 this parameter w has the constant value one. In Spritz it can take every integer relative prime to the length of the byte vector.
CompositeARC4 = ARC4
CompositeARC4Tool = ARC4, as it became public in 1994.
CompositeSPRITZ = Spritz
CompositeSPRITZTool = Spritz is an improved version of ARC4, which was presented on October 27th, 2014 by Ronald Rivest and Jacob Schuldt. The first 256 steps (the setup of the byte vector) are identical with ARC4, but a modified function is used to generate the pseudorandom numbers. This function used a third variable called w. Further details are available via the online help of this plug-in.
AlgSelectionBoxText = Selection of the algorithm
AlgSelectionBoxTool = Due to known weaknesses in ARC4, several improved variants of the algorithm have been proposed. This plug-in implements the basic version ARC4 and the variant Spritz.
CopyToClipboard = Copy to clipboard
CopyToClipboardTool = This button allows you to copy the contents of this data vector, in hexadecimal number format, to the clipboard of your system.
KeySelectionWizardHeading = Key selection
PlainSelectionWizardHeading = Plaintext selection