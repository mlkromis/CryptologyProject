#Eclipse modern messages class
#Sat Mar 07 13:03:56 CET 2015
HashingView_0=SHA3 Candidates
HashingView_01=\nFirst the message is extended so that its length is congruent to 447 modulo 512.\n Length extension is performed by appending a bit 1 followed by a sufficient number of 0 bits. At least one bit and at most 512 are appended.\n Then a bit 1 is added, followed by a 64-bit unsigned big-endian representation of `. Padding can be represented as m0,..m, 1000 . . . 0001, <l64>.\n This procedure guarantees that the bit length of the padded message is a multiple of 512.\n
HashingView_1=\nA hash function maps a large input set to a smaller output set. The input is of variable length, however, the output, usually has a small fixed length. Here, it is possible to select a hash function and the representation type of the hash values. The hash values of both input texts are calculated and displayed at once. The difference between the two hash values displayed at the bottom is a measure of the sensitivity of a hash value concerning changes in the input.
HashingView_10=Hash value
HashingView_11=Difference of the two hash values
HashingView_12=% of the bits are different (
HashingView_13=\ of 
HashingView_14=). Longest unchanged bit sequence\: Offset 
HashingView_15=, length 
HashingView_16=example_en.txt
HashingView_17=\ Longest changed bit sequence\: Offset 
HashingView_18=.\r\nNumber of longest bit sequences\: unchanged \=  
HashingView_2=Select a hash function
HashingView_21=\ ; changed \= 
HashingView_3=Representation of the hash values
HashingView_4=hexadecimal
HashingView_5=decimal
HashingView_6=binary
HashingView_7=Input String
HashingView_8=Hash value (salt added) 
HashingView_9=Salt
HashingView_btnChanged_text=Underline longest changed bit sequences
HashingView_btnUnchanged_text=Underline longest unchanged bit sequences
HashingView_mntmCopy_text=Copy
HashingView_mntmSelectAll_text=Select All
