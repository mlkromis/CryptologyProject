#Eclipse modern messages class
#Sun Jan 04 16:41:57 CET 2015
MerkleHellmanView_0=Merkle-Hellman is an asymmetric encryption scheme which is based on the knapsack problem. To start the algorithm please select the number of elements for the private key and a start value. The private key A is created automatically and randomly. If you want another private key you can either directly change the values or click the button "Generate private key". After that, you have to create the public key\: Click the button "Create public key".
MerkleHellmanView_00=To encrypt a message m  enter a natural number for m and click the button "Encrypt". Each bit in the public key that corresponds to a 1 in the binary representation of the plaintext flows in the ciphertext c (bits that correspond to 0 in the plaintext are ignored when constructing c). These bits of the public key are added. The resulting sum is the ciphertext c \:\= Sum( m(i) * B(i) mod M ).
MerkleHellmanView_000=To decrypt the ciphertext c we first have to compute c'\= c * U mod M. Now, we pick the largest element of the private key A(i). If c' < A(i) then m(i) \= 0; if c' >\= A(i) then m(i) \= 1. Then, we subtract A(i) * m(i) from c' till we get 0. If the difference doesn't become 0 then a wrong key was used to decrypt the ciphertext.
MerkleHellmanView_0000=Merkle-Hellman Knapsack Cryptosystem\r\n
MerkleHellmanView_1=Key generation
MerkleHellmanView_10=Binary representation of m\:
MerkleHellmanView_11=Iteration
MerkleHellmanView_12=Equation
MerkleHellmanView_13=Encrypt
MerkleHellmanView_14=Decryption
MerkleHellmanView_15=Iteration
MerkleHellmanView_16=Equation
MerkleHellmanView_17=Decrypt
MerkleHellmanView_18=Result
MerkleHellmanView_19=The decryption led to the same result as the original plaintext.\nThe bit strings are equal.\r\n
MerkleHellmanView_2=Number of elements (|A|) of the private key A\:
MerkleHellmanView_20=The modul M has to be bigger than the sum of the elements of A which is 
MerkleHellmanView_21=\nPlease enter another value for M.
MerkleHellmanView_22a=The multiplier W \= 
MerkleHellmanView_22b=has to be smaller than the modul M \= 
MerkleHellmanView_23=\nPlease enter another value for W or M.
MerkleHellmanView_24=\nThe modul M and the multiplier W are not coprime: 
MerkleHellmanView_24a=\nPlease choose other values.
MerkleHellmanView_25=The modul M has to be bigger than the sum of the elements of A which is 
MerkleHellmanView_26=\nPlease enter another value for M.
MerkleHellmanView_27=The multiplier W must be less than the modulus M \=
MerkleHellmanView_28=\nPlease enter another value for W or M.
MerkleHellmanView_29=The modul M and the multiplier W are not coprime. The gcd(M,W) \= 
MerkleHellmanView_3=Start value (for the the first element of the private key A)\:
MerkleHellmanView_30=Unfortunately, the decryption did not lead to the same result as the original plaintext.\nThe bit strings are not equal.\n
MerkleHellmanView_31=gcd (M,W) \= 1 and 1 <\= W < M
MerkleHellmanView_32=gcd(M,W) \= 
MerkleHellmanView_33=Greatest common divisor
MerkleHellmanView_34=\nPlease choose other values. 
MerkleHellmanView_35=Warning
MerkleHellmanView_36=Question
MerkleHellmanView_37=Do you want to accept the entered values for the private key?\nThe entered private key is not a super increasing sequence.
MerkleHellmanView_4=Generate private key
MerkleHellmanView_5=Private key A
MerkleHellmanView_6=Public key B\: B(i) \= A(i) * W mod M, 1 <\= i < 
MerkleHellmanView_7=Create public key
MerkleHellmanView_8=Public key B
MerkleHellmanView_9=Encryption
MerkleHellmanView_lblBinaryRepresentationOf_text=Binary representation of c\:
